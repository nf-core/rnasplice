/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }
}

//
// Genome preparation options
//

process {
    withName: 'GUNZIP_.*|MAKE_TRANSCRIPTS_FASTA' {
        publishDir = [
            path: { "${params.outdir}/genome" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: 'UNTAR_.*' {
        ext.args2 = '--no-same-owner'
    }

    withName: 'UNTAR_.*|STAR_GENOMEGENERATE|STAR_GENOMEGENERATE_IGENOMES' {
        publishDir = [
            path: { "${params.outdir}/genome/index" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: 'GFFREAD' {
        ext.args   = '--keep-exon-attrs -F -T'
        publishDir = [
            path: { "${params.outdir}/genome" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: 'GFFREAD_TX2GENE' {
        ext.args   = "--table transcript_id,${params.gtf_group_features},${params.gtf_extra_attributes}"
        publishDir = [
            path: { "${params.outdir}/genome" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: 'SALMON_INDEX' {
        ext.args   = params.gencode ? '--gencode' : ''
        publishDir = [
            path: { "${params.outdir}/genome/index" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: 'CAT_FASTQ' {
        publishDir = [
            path: { "${params.outdir}/fastq" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_merged_fastq
        ]
    }

    withName: 'CUSTOM_GETCHROMSIZES' {
        publishDir = [
            path: { "${params.outdir}/genome" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: 'GTF_GENE_FILTER' {
        publishDir = [
            path: { "${params.outdir}/genome" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

}

//
// Read QC and trimming options
//

if (!(params.skip_fastqc)) {
    process {
        withName: '.*:FASTQC_TRIMGALORE:FASTQC' {
            ext.args   = '--quiet'
        }
    }
}

if (!params.skip_trimming) {
    process {
        withName: '.*:FASTQC_TRIMGALORE:TRIMGALORE' {
            ext.args   = [
                params.skip_trimgalore_fastqc ? "" : '--fastqc',
                params.trim_nextseq > 0 ? "--nextseq ${params.trim_nextseq}" : ''
            ].join(' ').trim()
            publishDir = [
                [
                    path: { "${params.outdir}/trimgalore/fastqc" },
                    mode: params.publish_dir_mode,
                    pattern: "*.{html,zip}"
                ],
                [
                    path: { "${params.outdir}/trimgalore" },
                    mode: params.publish_dir_mode,
                    pattern: "*.fq.gz",
                    enabled: params.save_trimmed
                ],
                [
                    path: { "${params.outdir}/trimgalore" },
                    mode: params.publish_dir_mode,
                    pattern: "*.txt"
                ]
            ]
        }
    }
}

//
// General alignment options
//

if (!params.skip_alignment) {

    if (!params.skip_bigwig) {
        process {
            withName: 'BEDTOOLS_GENOMECOV' {
                ext.args   = '-split -du'
                publishDir = [
                    path: { "${params.outdir}/bedtools/${meta.id}" },
                    enabled: false
                ]
            }

            withName: '.*:BEDGRAPH_TO_BIGWIG_FORWARD:UCSC_BEDCLIP' {
                ext.prefix = { "${meta.id}.clip.forward" }
                publishDir = [
                    path: { "${params.outdir}/${params.aligner}" },
                    enabled: false
                ]
            }

            withName: '.*:BEDGRAPH_TO_BIGWIG_FORWARD:UCSC_BEDGRAPHTOBIGWIG' {
                ext.prefix = { "${meta.id}.forward" }
                publishDir = [
                    path: { "${params.outdir}/${params.aligner}/bigwig" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }

            withName: '.*:BEDGRAPH_TO_BIGWIG_REVERSE:UCSC_BEDCLIP' {
                ext.prefix = { "${meta.id}.clip.reverse" }
                publishDir = [
                    path: { "${params.outdir}/${params.aligner}" },
                    enabled: false
                ]
            }

            withName: '.*:BEDGRAPH_TO_BIGWIG_REVERSE:UCSC_BEDGRAPHTOBIGWIG' {
                ext.prefix = { "${meta.id}.reverse" }
                publishDir = [
                    path: { "${params.outdir}/${params.aligner}/bigwig" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }
        }
    }
}

//
// STAR Salmon alignment options
//

if (!params.skip_alignment && (params.aligner == 'star_salmon' || params.aligner == "star")) {
    process {
        withName: 'STAR_ALIGN|STAR_ALIGN_IGENOMES' {
            ext.args   = [
                '--quantMode TranscriptomeSAM',
                '--twopassMode Basic',
                '--outSAMtype BAM Unsorted',
                '--readFilesCommand zcat',
                '--runRNGseed 0',
                '--outFilterMultimapNmax 20',
                '--alignSJDBoverhangMin 1',
                '--outSAMattributes NH HI AS NM MD',
                '--quantTranscriptomeBan Singleend',
                params.save_unaligned ? '--outReadsUnmapped Fastx' : ''
            ].join(' ').trim()
            publishDir = [
                [
                    path: { "${params.outdir}/${params.aligner}/log" },
                    mode: params.publish_dir_mode,
                    pattern: '*.{out,tab}'
                ],
                [
                    path: { "${params.outdir}/${params.aligner}" },
                    mode: params.publish_dir_mode,
                    pattern: '*.bam',
                    enabled: params.save_align_intermeds
                ],
                [
                    path: { "${params.outdir}/${params.aligner}/unmapped" },
                    mode: params.publish_dir_mode,
                    pattern: '*.fastq.gz',
                    enabled: params.save_unaligned
                ]
            ]
        }
    }
}

//
// Samtools bam options
//

if (!params.skip_alignment) {
    process {
        withName: '.*:BAM_STATS_SAMTOOLS:SAMTOOLS_.*' {
            publishDir = [
                path: { "${params.outdir}/${params.aligner}/samtools_stats" },
                mode: params.publish_dir_mode,
                pattern: "*.{stats,flagstat,idxstats}"
            ]
        }

        withName: 'SAMTOOLS_SORT' {
            ext.prefix = { "${meta.id}.sorted" }
            publishDir = [
                path: { "${params.outdir}/${params.aligner}" },
                mode: params.publish_dir_mode,
                pattern: "*.bam",
                enabled: ( ['star_salmon','star'].contains(params.aligner))
            ]
        }

        withName: 'SAMTOOLS_INDEX' {
            ext.args   = params.bam_csi_index ? '-c' : ''
            publishDir = [
                path: { "${params.outdir}/${params.aligner}" },
                mode: params.publish_dir_mode,
                pattern: "*.{bai,csi}",
                enabled: ( ['star_salmon','star'].contains(params.aligner))
            ]
        }
    }
}

//
// Star salmon quant options
//

if (!params.skip_alignment && params.aligner == 'star_salmon') {
    process {
        withName: 'SALMON_QUANT_STAR' {
            publishDir = [
                path: { "${params.outdir}/${params.aligner}/${params.pseudo_aligner}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

//
// Salmon pseudo-alignment options
//

if (params.pseudo_aligner == 'salmon') {
    process {
        withName: 'SALMON_QUANT_SALMON' {
            publishDir = [
                path: { "${params.outdir}/${params.pseudo_aligner}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

//
// rMATs options
//

if (params.rmats) {
    process {
        withName: 'CREATE_BAMLIST_COND1|CREATE_BAMLIST_COND2|RMATS_PREP|RMATS_POST|RMATS_PREP_SINGLE|RMATS_POST_SINGLE' {
            publishDir = [
                path: { "${params.outdir}/${params.aligner}/rmats" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

//
// DEXSeq Exon options
//

if (params.dexseq_exon) {

    process {

        withName: 'DEXSEQ_ANNOTATION' {
            publishDir = [
                path: { "${params.outdir}/${params.aligner}/dexseq_exon/annotation" },
                mode: params.publish_dir_mode,
                pattern: "*.gff",
                enabled: params.save_dexseq_annotation
            ]
        }

        withName: 'DEXSEQ_COUNT' {
            publishDir = [
                path: { "${params.outdir}/${params.aligner}/dexseq_exon/counts" },
                mode: params.publish_dir_mode,
                pattern: "*.clean.count.txt",
            ]
        }

        withName: 'DEXSEQ_EXON' {
            publishDir = [
                path: { "${params.outdir}/${params.aligner}/dexseq_exon/results" },
                mode: params.publish_dir_mode,
                pattern: "*.{tsv,rds}",
            ]
        }
    }
}

//
// DEXSeq DTU options (aligner)
//

if (params.aligner == "star_salmon" && params.dexseq_dtu) {

    process {
        withName: '.*:DRIMSEQ_DEXSEQ_DTU_STAR_SALMON:DRIMSEQ_FILTER' {
            publishDir = [
                path: { "${params.outdir}/${params.aligner}/dexseq_dtu/filter/drimseq" },
                mode: params.publish_dir_mode,
                pattern: "*.rds"
            ]
        }
    }

    process {
        withName: '.*:DRIMSEQ_DEXSEQ_DTU_STAR_SALMON:DEXSEQ_DTU' {
            publishDir = [
                path: { "${params.outdir}/${params.aligner}/dexseq_dtu/results/dexseq" },
                mode: params.publish_dir_mode,
                pattern: "*.{tsv,rds}",
            ]
        }
    }

    process {
        withName: '.*:DRIMSEQ_DEXSEQ_DTU_STAR_SALMON:STAGER' {
            publishDir = [
                path: { "${params.outdir}/${params.aligner}/dexseq_dtu/results/stager" },
                mode: params.publish_dir_mode,
                pattern: "*.{tsv,rds}",
            ]
        }
    }

}

//
// DEXSeq DTU options (pseudo-aligner)
//

if (params.pseudo_aligner == "salmon" && params.dexseq_dtu) {

    process {
        withName: '.*:DRIMSEQ_DEXSEQ_DTU_SALMON:DRIMSEQ_FILTER' {
            publishDir = [
                path: { "${params.outdir}/${params.pseudo_aligner}/dexseq_dtu/filter/drimseq" },
                mode: params.publish_dir_mode,
                pattern: "*.rds"
            ]
        }

        withName: '.*:DRIMSEQ_DEXSEQ_DTU_SALMON:DEXSEQ_DTU' {
            publishDir = [
                path: { "${params.outdir}/${params.pseudo_aligner}/dexseq_dtu/results/dexseq" },
                mode: params.publish_dir_mode,
                pattern: "*.{tsv,rds}",
            ]
        }

        withName: '.*:DRIMSEQ_DEXSEQ_DTU_SALMON:STAGER' {
            publishDir = [
                path: { "${params.outdir}/${params.pseudo_aligner}/dexseq_dtu/results/stager" },
                mode: params.publish_dir_mode,
                pattern: "*.{tsv,rds}",
            ]
        }
    }
}

//
// edgeR DEU config
//

if (params.edger_exon) {
    process {
        withName: 'SUBREAD_FEATURECOUNTS' {
            ext.args   = [
                '-F GTF',
                "-t exon",
                "-g ${params.gtf_group_features}",
                '-f',
                '-O',
                '-B',
                '-C'
            ].join(' ').trim()
            publishDir = [
                path: { "${params.outdir}/${params.aligner}/featurecounts" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
    process {
        withName: 'EDGER_EXON' {
            publishDir = [
                path: { "${params.outdir}/${params.aligner}/edger" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

//
// SUPPA options (aligner)
//

if (params.aligner == "star_salmon" && params.suppa) {

    process {
        withName: '.*:SUPPA_STAR_SALMON:GENERATE_EVENTS_(IOE|IOI)' {
            publishDir = [
                [
                    path: { "${params.outdir}/${params.aligner}/suppa/generate_events/per_local_event" },
                    mode: params.publish_dir_mode,
                    pattern: '*.{ioe,gtf}',
                    enabled: params.suppa_per_local_event
                ],
                [
                    path: { "${params.outdir}/${params.aligner}/suppa/generate_events/per_isoform" },
                    mode: params.publish_dir_mode,
                    pattern: '*.ioi',
                    enabled: params.suppa_per_isoform
                ]
            ]
        }

        withName: '.*:SUPPA_STAR_SALMON:PSIPEREVENT' {
            publishDir = [
                    path: { "${params.outdir}/${params.aligner}/suppa/psi_per_local_event" },
                    mode: params.publish_dir_mode,
                    pattern: '*.psi',
                    enabled: params.suppa_per_local_event
                ]
        }

        withName: '.*:SUPPA_STAR_SALMON:PSIPERISOFORM' {
            publishDir = [
                    path: { "${params.outdir}/${params.aligner}/suppa/psi_per_isoform" },
                    mode: params.publish_dir_mode,
                    pattern: '*.psi',
                    enabled: params.suppa_per_isoform
            ]
        }

        withName: '.*:SUPPA_STAR_SALMON:SPLIT_FILES_(TPM|IOE|IOI)' {
            publishDir = [
                [
                    path: { "${params.outdir}/${params.aligner}/suppa/split_files/per_local_event" },
                    mode: params.publish_dir_mode,
                    pattern: 'local*.{tpm,psi}',
                    enabled: params.suppa_per_local_event
                ],
                [
                    path: { "${params.outdir}/${params.aligner}/suppa/split_files/per_isoform" },
                    mode: params.publish_dir_mode,
                    pattern: 'transcript*.{tpm,psi}',
                    enabled: params.suppa_per_isoform
                ],
                [
                    path: { "${params.outdir}/${params.aligner}/suppa/split_files/tpms" },
                    mode: params.publish_dir_mode,
                    pattern: '*.tpm',
                ]
            ]
        }

        withName: '.*:SUPPA_STAR_SALMON:DIFFSPLICE_(IOE|IOI)' {
            publishDir = [
                [
                    path: { "${params.outdir}/${params.aligner}/suppa/diffsplice/per_local_event" },
                    mode: params.publish_dir_mode,
                    pattern: '*local*.{dpsi,psivec}',
                    enabled: params.suppa_per_local_event
                ],
                [
                    path: { "${params.outdir}/${params.aligner}/suppa/diffsplice/per_isoform" },
                    mode: params.publish_dir_mode,
                    pattern: '*transcript*.{dpsi,psivec}',
                    enabled: params.suppa_per_isoform
                ]
            ]
        }

        withName: '.*:SUPPA_STAR_SALMON:CLUSTEREVENTS_(IOE|IOI)' {
            publishDir = [
                [
                    path: { "${params.outdir}/${params.aligner}/suppa/clusterevents/per_local_event" },
                    mode: params.publish_dir_mode,
                    pattern: '*local*.{clustvec,log}',
                    enabled: params.suppa_per_local_event
                ],
                [
                    path: { "${params.outdir}/${params.aligner}/suppa/clusterevents/per_isoform" },
                    mode: params.publish_dir_mode,
                    pattern: '*transcript*.{clustvec,log}',
                    enabled: params.suppa_per_isoform
                ]
            ]
        }
    }
}

//
// SUPPA options (pseudo_aligner)
//

if (params.pseudo_aligner == "salmon" && params.suppa) {

    process {
        withName: '.*:SUPPA_SALMON:GENERATE_EVENTS_(IOE|IOI)' {
            publishDir = [
                [
                    path: { "${params.outdir}/${params.pseudo_aligner}/suppa/generate_events/per_local_event" },
                    mode: params.publish_dir_mode,
                    pattern: '*.{ioe,gtf}',
                    enabled: params.suppa_per_local_event
                ],
                [
                    path: { "${params.outdir}/${params.pseudo_aligner}/suppa/generate_events/per_isoform" },
                    mode: params.publish_dir_mode,
                    pattern: '*.ioi',
                    enabled: params.suppa_per_isoform
                ]
            ]
        }

        withName: '.*:SUPPA_SALMON:PSIPEREVENT' {
            publishDir = [
                    path: { "${params.outdir}/${params.pseudo_aligner}/suppa/psi_per_local_event" },
                    mode: params.publish_dir_mode,
                    pattern: '*.psi',
                    enabled: params.suppa_per_local_event
                ]
        }

        withName: '.*:SUPPA_SALMON:PSIPERISOFORM' {
            publishDir = [
                    path: { "${params.outdir}/${params.pseudo_aligner}/suppa/psi_per_isoform" },
                    mode: params.publish_dir_mode,
                    pattern: '*.psi',
                    enabled: params.suppa_per_isoform
            ]
        }

        withName: '.*:SUPPA_SALMON:SPLIT_FILES_(TPM|IOE|IOI)' {
            publishDir = [
                [
                    path: { "${params.outdir}/${params.pseudo_aligner}/suppa/split_files/per_local_event" },
                    mode: params.publish_dir_mode,
                    pattern: 'local*.{tpm,psi}',
                    enabled: params.suppa_per_local_event
                ],
                [
                    path: { "${params.outdir}/${params.pseudo_aligner}/suppa/split_files/per_isoform" },
                    mode: params.publish_dir_mode,
                    pattern: 'transcript*.{tpm,psi}',
                    enabled: params.suppa_per_isoform
                ],
                [
                    path: { "${params.outdir}/${params.pseudo_aligner}/suppa/split_files/tpms" },
                    mode: params.publish_dir_mode,
                    pattern: '*.tpm',
                ]
            ]
        }

        withName: '.*:SUPPA_SALMON:DIFFSPLICE_(IOE|IOI)' {
            publishDir = [
                [
                    path: { "${params.outdir}/${params.pseudo_aligner}/suppa/diffsplice/per_local_event" },
                    mode: params.publish_dir_mode,
                    pattern: '*local*.{dpsi,psivec}',
                    enabled: params.suppa_per_local_event
                ],
                [
                    path: { "${params.outdir}/${params.pseudo_aligner}/suppa/diffsplice/per_isoform" },
                    mode: params.publish_dir_mode,
                    pattern: '*transcript*.{dpsi,psivec}',
                    enabled: params.suppa_per_isoform
                ]
            ]
        }

        withName: '.*:SUPPA_SALMON:CLUSTEREVENTS_(IOE|IOI)' {
            publishDir = [
                [
                    path: { "${params.outdir}/${params.pseudo_aligner}/suppa/clusterevents/per_local_event" },
                    mode: params.publish_dir_mode,
                    pattern: '*local*.{clustvec,log}',
                    enabled: params.suppa_per_local_event
                ],
                [
                    path: { "${params.outdir}/${params.pseudo_aligner}/suppa/clusterevents/per_isoform" },
                    mode: params.publish_dir_mode,
                    pattern: '*transcript*.{clustvec,log}',
                    enabled: params.suppa_per_isoform
                ]
            ]
        }
    }
}

//
// TX2GENE_TXIMPORT options (aligner)
//

if (params.aligner == "star_salmon") {

    process {
        withName: '.*:TX2GENE_TXIMPORT_STAR_SALMON:TXIMPORT' {
            publishDir = [
                path: { "${params.outdir}/${params.aligner}/tximport" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }

}

//
// TX2GENE_TXIMPORT options (pseudo_aligner)
//

if (params.pseudo_aligner == "salmon") {

    process {
        withName: '.*:TX2GENE_TXIMPORT_SALMON:TXIMPORT' {
            publishDir = [
                path: { "${params.outdir}/${params.pseudo_aligner}/tximport" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }

}
